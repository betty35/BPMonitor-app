package bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.bean.Measure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE".
*/
public class MeasureDao extends AbstractDao<Measure, Long> {

    public static final String TABLENAME = "MEASURE";

    /**
     * Properties of entity Measure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Time = new Property(1, java.util.Date.class, "time", false, "TIME");
        public final static Property Dia = new Property(2, int.class, "dia", false, "DIA");
        public final static Property Sys = new Property(3, int.class, "sys", false, "SYS");
        public final static Property Pulse = new Property(4, int.class, "pulse", false, "PULSE");
        public final static Property Position = new Property(5, int.class, "position", false, "POSITION");
        public final static Property Arm = new Property(6, int.class, "arm", false, "ARM");
        public final static Property Mood = new Property(7, int.class, "mood", false, "MOOD");
    }


    public MeasureDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"TIME\" INTEGER," + // 1: time
                "\"DIA\" INTEGER NOT NULL ," + // 2: dia
                "\"SYS\" INTEGER NOT NULL ," + // 3: sys
                "\"PULSE\" INTEGER NOT NULL ," + // 4: pulse
                "\"POSITION\" INTEGER NOT NULL ," + // 5: position
                "\"ARM\" INTEGER NOT NULL ," + // 6: arm
                "\"MOOD\" INTEGER NOT NULL );"); // 7: mood
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_MEASURE_TIME ON \"MEASURE\"" +
                " (\"TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Measure entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
        stmt.bindLong(3, entity.getDia());
        stmt.bindLong(4, entity.getSys());
        stmt.bindLong(5, entity.getPulse());
        stmt.bindLong(6, entity.getPosition());
        stmt.bindLong(7, entity.getArm());
        stmt.bindLong(8, entity.getMood());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Measure entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(2, time.getTime());
        }
        stmt.bindLong(3, entity.getDia());
        stmt.bindLong(4, entity.getSys());
        stmt.bindLong(5, entity.getPulse());
        stmt.bindLong(6, entity.getPosition());
        stmt.bindLong(7, entity.getArm());
        stmt.bindLong(8, entity.getMood());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Measure readEntity(Cursor cursor, int offset) {
        Measure entity = new Measure( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // time
            cursor.getInt(offset + 2), // dia
            cursor.getInt(offset + 3), // sys
            cursor.getInt(offset + 4), // pulse
            cursor.getInt(offset + 5), // position
            cursor.getInt(offset + 6), // arm
            cursor.getInt(offset + 7) // mood
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Measure entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTime(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDia(cursor.getInt(offset + 2));
        entity.setSys(cursor.getInt(offset + 3));
        entity.setPulse(cursor.getInt(offset + 4));
        entity.setPosition(cursor.getInt(offset + 5));
        entity.setArm(cursor.getInt(offset + 6));
        entity.setMood(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Measure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Measure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Measure entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
