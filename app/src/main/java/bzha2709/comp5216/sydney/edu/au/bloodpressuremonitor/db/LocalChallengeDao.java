package bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.bean.LocalChallenge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCAL_CHALLENGE".
*/
public class LocalChallengeDao extends AbstractDao<LocalChallenge, Void> {

    public static final String TABLENAME = "LOCAL_CHALLENGE";

    /**
     * Properties of entity LocalChallenge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Description = new Property(2, String.class, "description", false, "DESCRIPTION");
        public final static Property Img_path = new Property(3, String.class, "img_path", false, "IMG_PATH");
        public final static Property Traceable = new Property(4, boolean.class, "traceable", false, "TRACEABLE");
    }


    public LocalChallengeDao(DaoConfig config) {
        super(config);
    }
    
    public LocalChallengeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCAL_CHALLENGE\" (" + //
                "\"ID\" INTEGER NOT NULL UNIQUE ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DESCRIPTION\" TEXT," + // 2: description
                "\"IMG_PATH\" TEXT," + // 3: img_path
                "\"TRACEABLE\" INTEGER NOT NULL );"); // 4: traceable
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCAL_CHALLENGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocalChallenge entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String img_path = entity.getImg_path();
        if (img_path != null) {
            stmt.bindString(4, img_path);
        }
        stmt.bindLong(5, entity.getTraceable() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocalChallenge entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(3, description);
        }
 
        String img_path = entity.getImg_path();
        if (img_path != null) {
            stmt.bindString(4, img_path);
        }
        stmt.bindLong(5, entity.getTraceable() ? 1L: 0L);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocalChallenge readEntity(Cursor cursor, int offset) {
        LocalChallenge entity = new LocalChallenge( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // description
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img_path
            cursor.getShort(offset + 4) != 0 // traceable
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocalChallenge entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDescription(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg_path(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTraceable(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocalChallenge entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocalChallenge entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocalChallenge entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
