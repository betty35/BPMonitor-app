package bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import bzha2709.comp5216.sydney.edu.au.bloodpressuremonitor.bean.Exercise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EXERCISE".
*/
public class ExerciseDao extends AbstractDao<Exercise, Void> {

    public static final String TABLENAME = "EXERCISE";

    /**
     * Properties of entity Exercise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Time = new Property(0, java.util.Date.class, "time", false, "TIME");
        public final static Property Steps = new Property(1, int.class, "steps", false, "STEPS");
    }


    public ExerciseDao(DaoConfig config) {
        super(config);
    }
    
    public ExerciseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXERCISE\" (" + //
                "\"TIME\" INTEGER," + // 0: time
                "\"STEPS\" INTEGER NOT NULL );"); // 1: steps
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_EXERCISE_TIME ON \"EXERCISE\"" +
                " (\"TIME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXERCISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time.getTime());
        }
        stmt.bindLong(2, entity.getSteps());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Exercise entity) {
        stmt.clearBindings();
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(1, time.getTime());
        }
        stmt.bindLong(2, entity.getSteps());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Exercise readEntity(Cursor cursor, int offset) {
        Exercise entity = new Exercise( //
            cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)), // time
            cursor.getInt(offset + 1) // steps
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Exercise entity, int offset) {
        entity.setTime(cursor.isNull(offset + 0) ? null : new java.util.Date(cursor.getLong(offset + 0)));
        entity.setSteps(cursor.getInt(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Exercise entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Exercise entity) {
        return null;
    }

    @Override
    public boolean hasKey(Exercise entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
